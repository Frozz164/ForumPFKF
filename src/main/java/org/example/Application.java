package org.example;

import lombok.extern.slf4j.Slf4j;
import org.springframework.boot.Banner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.domain.EntityScan;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;

@Slf4j
@SpringBootApplication
@EntityScan("org.example.model")
@ComponentScan(basePackages = "org.example")
@EnableJpaRepositories("org.example.repository")
public class Application {

    public static void main(String[] args) {
        Thread.setDefaultUncaughtExceptionHandler((thread, throwable) -> {
            log.error("‚ùå –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ: " + thread.getName(), throwable);
            throwable.printStackTrace();
        });

        try {
            log.info("–ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...");
            log.debug("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Spring Boot –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è");
            
            SpringApplication app = new SpringApplication(Application.class);
            app.setBannerMode(Banner.Mode.OFF);
            
            // –í–∫–ª—é—á–∞–µ–º –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ä–µ–∂–∏–º
            System.setProperty("debug", "true");
            System.setProperty("trace", "true");
            
            log.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spring –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞");
            ApplicationContext context = null;
            
            try {
                log.debug("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–ø—É—Å–∫–∞ Spring –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞");
                context = app.run(args);
                log.debug("Spring –∫–æ–Ω—Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω");
            } catch (Exception e) {
                log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Spring –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞", e);
                throw e;
            }
            
            log.debug("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è");
            Environment env = context.getEnvironment();
            String protocol = "http";
            String serverPort = env.getProperty("server.port", "8080");
            String contextPath = env.getProperty("server.servlet.context-path", "/");
            
            log.info("\n----------------------------------------------------------\n" +
                    "üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!\n" +
                    "üåê –î–æ—Å—Ç—É–ø –ª–æ–∫–∞–ª—å–Ω–æ: \t{}://localhost:{}{}\n" +
                    "üîí –ü—Ä–æ—Ñ–∏–ª—å: \t{}\n" +
                    "----------------------------------------------------------",
                protocol,
                serverPort,
                contextPath,
                env.getActiveProfiles().length > 0 ? String.join(", ", env.getActiveProfiles()) : "default"
            );

            log.info("–ë–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
            
            if (env.getActiveProfiles().length == 0) {
                log.warn("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –±–µ–∑ —è–≤–Ω–æ–≥–æ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.");
            }
        } catch (Exception e) {
            log.error("‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", e);
            e.printStackTrace();
            System.exit(1);
        }
    }
} 